(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[15],{"9kvl":function(n,e,t){"use strict";var o=t("FfOG");t.d(e,"a",(function(){return o["b"]}));t("bCY9")},afA6:function(n,e,t){"use strict";t.r(e);var o=t("IIKO"),r=t("q1tI"),s=t.n(r),a=t("q3YX"),i=t("5Tp6"),d=t("c1Ei"),c=t.n(d),l=t("rlch"),u="import React from 'react'\nimport { createStore, Models } from 'dobux'\nimport * as models from './model'\n\nimport './index.less'\n\nexport type RootModel = Models<typeof models>\n\n// \u521b\u5efa store \u5b9e\u4f8b\nconst { withProvider, useModel } = createStore(models)\n\nconst Counter: React.FC = () => {\n  const { state, reducers, effects } = useModel('counter')\n\n  const handleIncrease = () => {\n    reducers.increase()\n  }\n\n  const handleDecrease = () => {\n    reducers.decrease()\n  }\n\n  const handleSetValue = () => {\n    reducers.setValue('count', state.count + 2)\n  }\n\n  const handleSetValues = () => {    \n    reducers.setValues({\n      count: state.count - 2\n    })\n  }\n\n  const handleReset = () => {\n    reducers.reset()\n  }\n\n  const handleAsync = () => {\n    effects.increaseAsync()\n  }\n\n  if (effects.increaseAsync.loading) {\n    return <p className=\"loading\">loading ...</p>\n  }\n\n  return (\n    <div className=\"counter\">\n      <p>The count is: {state.count}</p>\n      <button onClick={handleIncrease}>+</button>\n      <button onClick={handleDecrease}>-</button>\n      <button onClick={handleSetValue}>setValue</button>\n      <button onClick={handleSetValues}>setValues</button>\n      <button onClick={handleAsync}>async</button>\n      <button onClick={handleReset}>reset</button>\n    </div>\n  )\n}\n\nexport default withProvider(Counter)",p="import { createModel } from 'dobux'\nimport { RootModel } from './index'\n\nfunction wait(ms: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const counter = createModel<RootModel, 'counter'>()({\n  state: {\n    count: 0,\n  },\n  reducers: {\n    increase(state) {\n      state.count += 1\n    },\n    decrease(state) {\n      state.count -= 1\n    },\n  },\n  effects: (model, rootModel) => ({\n    async increaseAsync() {\n      await wait(1000)\n      model.reducers.increase()\n      return model.effects.decreaseAsync() as number\n    },\n\n    async decreaseAsync() {\n      await wait(1000)\n      return -1\n    },\n  }),\n})",m=".counter {\n  p {\n    font-size: 20px;\n    font-weight: bold;\n    margin-bottom: 30px;\n  }\n\n  button {\n    min-width: 42px;\n    outline: none;\n    color: #fff;\n    background-color: #1890ff;\n    border-color: #1890ff;\n    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);\n    display: inline-block;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 14px;\n    line-height: 1.499;\n    display: inline-block;\n    font-weight: 400;\n    white-space: nowrap;\n    text-align: center;\n    border: 1px solid transparent;\n    -webkit-box-shadow: 0 2px 0 rgba(0, 0, 0, 0.015);\n    box-shadow: 0 2px 0 rgba(0, 0, 0, 0.015);\n    cursor: pointer;\n    height: 32px;\n    padding: 0 15px;\n    font-size: 14px;\n    border-color: #d9d9d9;\n  }\n\n  button + button {\n    margin-left: 10px;\n  }\n}\n\n.loading {\n  display: flex;\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 30px;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.3);\n  z-index: 10001;\n}",f="import React from 'react'\nimport { store } from './store'\n\nimport './index.less'\n\nconst { withProvider, useModel } = store\n\nconst Counter: React.FC = () => {\n  const { state, reducers, effects } = useModel('counter')\n\n  const handleIncrease = () => {\n    reducers.increase()\n  }\n\n  const handleDecrease = () => {\n    reducers.decrease()\n  }\n\n  const handleSetValue = () => {\n    reducers.setValue('count', state.count + 2)\n  }\n\n  const handleSetValues = () => {    \n    reducers.setValues({\n      count: state.count - 2\n    })\n  }\n\n  const handleReset = () => {\n    reducers.reset()\n  }\n\n  const handleAsync = () => {\n    effects.increaseAsync()\n  }\n\n  if (effects.increaseAsync.loading) {\n    return <p className=\"loading\">loading ...</p>\n  }\n\n  return (\n    <div className=\"counter\">\n      <p>The count is: {state.count}</p>\n      <button onClick={handleIncrease}>+</button>\n      <button onClick={handleDecrease}>-</button>\n      <button onClick={handleSetValue}>setValue</button>\n      <button onClick={handleSetValues}>setValues</button>\n      <button onClick={handleAsync}>async</button>\n      <button onClick={handleReset}>reset</button>\n    </div>\n  )\n}\n\nexport default withProvider(Counter)",h="import { createStore, Models } from 'dobux'\nimport * as models from './model'\n\nexport type RootModel = Models<typeof models>\n\n// \u521b\u5efa store \u5b9e\u4f8b\nexport const store = createStore(models)",x="import { createModel } from 'dobux'\nimport { RootModel } from './store'\n\nfunction wait(ms: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const counter = createModel<RootModel, 'counter'>()({\n  state: {\n    count: 0,\n  },\n  reducers: {\n    increase(state) {\n      state.count += 1\n    },\n    decrease(state) {\n      state.count -= 1\n    },\n  },\n  effects: (model, rootModel) => ({\n    async increaseAsync() {\n      await wait(1000)\n      model.reducers.increase()\n    },\n  }),\n})",b=".counter {\n  p {\n    font-size: 20px;\n    font-weight: bold;\n    margin-bottom: 30px;\n  }\n\n  button {\n    min-width: 42px;\n    outline: none;\n    color: #fff;\n    background-color: #1890ff;\n    border-color: #1890ff;\n    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);\n    display: inline-block;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 14px;\n    line-height: 1.499;\n    display: inline-block;\n    font-weight: 400;\n    white-space: nowrap;\n    text-align: center;\n    border: 1px solid transparent;\n    -webkit-box-shadow: 0 2px 0 rgba(0, 0, 0, 0.015);\n    box-shadow: 0 2px 0 rgba(0, 0, 0, 0.015);\n    cursor: pointer;\n    height: 32px;\n    padding: 0 15px;\n    font-size: 14px;\n    border-color: #d9d9d9;\n  }\n\n  button + button {\n    margin-left: 10px;\n  }\n}\n\n.loading {\n  display: flex;\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 30px;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.3);\n  z-index: 10001;\n}",g="import React from 'react'\nimport Header from './Header'\nimport UndoList from './UndoList'\nimport { store } from './store'\n\nimport './index.less'\n\nconst { Provider } = store\n\nconst TodoList: React.FC = () => {\n  return (\n    <Provider>\n      <div className=\"todo-list\">\n        <Header />\n        <UndoList />\n      </div>\n    </Provider>\n  )\n}\n\nexport default TodoList",v="import React, { ChangeEvent, KeyboardEvent } from 'react'\nimport { store } from '../store'\n\nfunction Header() {\n  const { state, reducers, effects } = store.useModel('header')\n\n  const handleChange = (e: ChangeEvent<{ value: string }>) => {\n    reducers.changeValue(e.target.value)\n  }\n\n  const handleKeyUp = (e: KeyboardEvent) => {\n    if (state.value && e.keyCode === 13) {\n      effects.addUndoItem()\n      reducers.changeValue('')\n    }\n  }\n\n  return (\n    <div className=\"header\">\n      <div className=\"content\">\n        TodoList\n        <input\n          onChange={handleChange}\n          onKeyUp={handleKeyUp}\n          value={state.value}\n          placeholder=\"Todo\"\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Header",w="import { createStore, Models } from 'dobux'\nimport * as models from './models'\n\nexport type RootModel = Models<typeof models>\n\nexport const store = createStore(models)",y="export { header } from './Header/model'\nexport { undoList } from './UndoList/model'",k="import { createModel } from 'dobux'\nimport { RootModel } from '../store'\n\nexport const header = createModel<RootModel, 'header'>()({\n  state: {\n    value: '',\n  },\n  reducers: {\n    changeValue(state, payload: string) {\n      state.value = payload\n    },\n  },\n  effects: (model, rootModel) => ({\n    addUndoItem() {\n      rootModel.undoList.reducers.addItem({\n        content: model.state.value,\n      })\n    },\n  }),\n})",M="import { createModel } from 'dobux'\nimport { RootModel } from '../store'\n\nfunction fetchList(): Promise<{ data: any[] }> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        data: [\n          {\n            content: 'Learn dobux',\n          },\n          {\n            content: 'Learn typescript',\n          },\n        ],\n      })\n    }, 1000)\n  })\n}\n\ninterface Item {\n  done?: boolean\n  content: string\n}\n\nexport const undoList = createModel<RootModel, 'undoList'>()({\n  state: {\n    items: [\n      {\n        content: 'Learn dobux',\n      },\n      {\n        content: 'Learn typescript',\n      },\n    ] as Item[],\n  },\n  reducers: {\n    addItem(state, item: Item) {\n      state.items.push(item)\n    },\n\n    deleteItem(state, index: number) {\n      state.items.splice(index, 1)\n    },\n\n    toggleItem(state, index: number) {\n      state.items[index].done = !state.items[index].done\n    },\n  },\n  effects: (model) => ({\n    async fetchUndoList() {\n      const result = await fetchList()\n      model.reducers.setValue('items', result.data as any)\n    },\n  }),\n})",C='import React from \'react\'\nimport { store } from \'../store\'\n\nfunction UndoList() {\n  const { state, reducers, effects } = store.useModel(\'undoList\')\n\n  const handleClick = (index: number) => {\n    reducers.deleteItem(index)\n  }\n\n  const handleToggle = (index: number) => {\n    reducers.toggleItem(index)\n  }\n\n  if (effects.fetchUndoList.loading) {\n    return <div className="loading">loading ...</div>\n  }\n\n  return (\n    <div className="undo-list">\n      <h2 className="title">\n        \u6b63\u5728\u8fdb\u884c <div className="count">{state.items.filter((item: any) => !item.done).length}</div>\n      </h2>\n      <ul className="content">\n        {state.items.map((item: any, index: number) => {\n          return (\n            !item.done && (\n              <li onClick={() => handleToggle(index)} className="item" key={index}>\n                {item.content}\n                <div\n                  onClick={e => {\n                    e.stopPropagation()\n                    handleClick(index)\n                  }}\n                  className="delete"\n                >\n                  -\n                </div>\n              </li>\n            )\n          )\n        })}\n      </ul>\n      <h2 className="title" style={{ marginTop: 30 }}>\n        \u5df2\u7ecf\u5b8c\u6210{\' \'}\n        <div className="count" data-test="count">\n          {state.items.filter((item: any) => item.done).length}\n        </div>\n      </h2>\n      <ul className="content">\n        {state.items.map((item: any, index: number) => {\n          return (\n            item.done && (\n              <li onClick={() => handleToggle(index)} className="item" key={index}>\n                {item.content}\n                <div\n                  onClick={e => {\n                    e.stopPropagation()\n                    handleClick(index)\n                  }}\n                  className="delete"\n                >\n                  -\n                </div>\n              </li>\n            )\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default UndoList',R=".todo-list {\n  .header {\n    line-height: 60px;\n    background-color: #333;\n  }\n\n  .header .content {\n    width: 600px;\n    margin: 0 auto;\n    font-size: 24px;\n    color: #fff;\n  }\n\n  .header input {\n    width: 60%;\n    float: right;\n    margin-top: 15px;\n    padding: 0 10px;\n    line-height: 24px;\n    border-radius: 5px;\n    outline: none;\n  }\n\n  .undo-list {\n    width: 600px;\n    margin: 0 auto;\n    text-align: left;\n  }\n\n  .undo-list .title {\n    line-height: 30px;\n    margin: 10px 0;\n    font-size: 24px;\n    font-weight: bold;\n  }\n\n  .undo-list .count {\n    float: right;\n    width: 30px;\n    height: 30px;\n    line-height: 30px;\n    border-radius: 50%;\n    text-align: center;\n    font-size: 12px;\n    background-color: #e6e6e6;\n  }\n\n  .undo-list .content {\n    list-style-type: none;\n  }\n\n  .undo-list .content .item {\n    line-height: 32px;\n    font-size: 16px;\n    margin-bottom: 10px;\n    background-color: #fff;\n    border-left: 3px solid #629a9c;\n    text-indent: 10px;\n    border-radius: 3px;\n  }\n\n  .undo-list .content .delete {\n    float: right;\n    width: 20px;\n    height: 20px;\n    line-height: 20px;\n    margin-top: 6px;\n    margin-right: 6px;\n    font-size: 16px;\n    margin-bottom: 10px;\n    background-color: #e6e6e6;\n    text-indent: 0;\n    border-radius: 50%;\n    text-align: center;\n  }\n}",V="import React from 'react'\nimport { createStore, Models } from 'dobux'\nimport * as models from './model'\n\nimport './index.less'\n\nexport type RootModel = Models<typeof models>\n\nexport interface CounterProps {\n  state: RootModel['counter']['state']\n  reducers: RootModel['counter']['reducers']\n  effects: RootModel['counter']['effects']\n}\n\n// \u521b\u5efa store \u5b9e\u4f8b\nconst { withProvider, withModel } = createStore(models)\n\nclass Counter extends React.Component<CounterProps> {\n  handleIncrease = () => {\n    const { reducers } = this.props\n    reducers.increase()\n  }\n\n  handleDecrease = () => {\n    const { reducers } = this.props\n    reducers.decrease()\n  }\n\n  handleSetValue = () => {\n    const { state ,reducers } = this.props\n    reducers.setValue('count', state.count + 2)\n  }\n\n  handleSetValues = () => {\n    const { state, reducers } = this.props\n    reducers.setValues({\n      count: state.count - 2\n    })\n  }\n\n  handleAsync = () => {\n    const { effects } = this.props\n    effects.increaseAsync()\n  }\n\n  handleReset = () => {\n    const { reducers } = this.props\n    reducers.reset('count')\n  }\n\n  render() {\n    const { state, effects } = this.props\n\n    if (effects.increaseAsync.loading) {\n      return <p className=\"loading\">loading ...</p>\n    }\n\n    return (\n      <div className=\"counter\">\n        <p>The count is: {state.count}</p>\n        <button onClick={this.handleIncrease}>+</button>\n        <button onClick={this.handleDecrease}>-</button>\n        <button onClick={this.handleSetValue}>setValue</button>\n        <button onClick={this.handleSetValues}>setValues</button>\n        <button onClick={this.handleAsync}>async</button>\n        <button onClick={this.handleReset}>reset</button>\n      </div>\n    )\n  }\n}\n\nexport default withProvider(withModel('counter')(Counter))",L="import { createModel } from 'dobux'\nimport { RootModel } from './index'\n\nfunction wait(ms: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport const counter = createModel<RootModel, 'counter'>()({\n  state: {\n    count: 0,\n  },\n  reducers: {\n    increase(state) {\n      state.count += 1\n    },\n    decrease(state) {\n      state.count -= 1\n    },\n  },\n  effects: (model, rootModel) => ({\n    async increaseAsync() {\n      await wait(1000)\n      model.reducers.increase()\n    },\n  }),\n})",N=".counter {\n  p {\n    font-size: 20px;\n    font-weight: bold;\n    margin-bottom: 30px;\n  }\n\n  button {\n    min-width: 42px;\n    outline: none;\n    color: #fff;\n    background-color: #1890ff;\n    border-color: #1890ff;\n    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.12);\n    display: inline-block;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 14px;\n    line-height: 1.499;\n    display: inline-block;\n    font-weight: 400;\n    white-space: nowrap;\n    text-align: center;\n    border: 1px solid transparent;\n    -webkit-box-shadow: 0 2px 0 rgba(0, 0, 0, 0.015);\n    box-shadow: 0 2px 0 rgba(0, 0, 0, 0.015);\n    cursor: pointer;\n    height: 32px;\n    padding: 0 15px;\n    font-size: 14px;\n    border-color: #d9d9d9;\n  }\n\n  button + button {\n    margin-left: 10px;\n  }\n}\n\n.loading {\n  display: flex;\n  font-size: 20px;\n  font-weight: bold;\n  margin-bottom: 30px;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.3);\n  z-index: 10001;\n}",S={"counter-hooks":{component:Object(l["a"])({loader:function(){var n=Object(i["a"])(c.a.mark((function n(){return c.a.wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(3).then(t.bind(null,"J0rd"));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:u},"model.ts":{import:"./model",content:p},"index.less":{import:"./index.less",content:m}},dependencies:{react:{version:"^16.8.3 || ^17"},dobux:{version:"1.5.1"},"react-dom":{version:"^16.8.3 || ^17"}},identifier:"counter-hooks"}},"counter-hooks2":{component:Object(l["a"])({loader:function(){var n=Object(i["a"])(c.a.mark((function n(){return c.a.wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(3).then(t.bind(null,"X+3H"));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:f},"store.ts":{import:"./store",content:h},"model.ts":{import:"./model",content:x},"index.less":{import:"./index.less",content:b}},dependencies:{react:{version:"^16.8.3 || ^17"},dobux:{version:"1.5.1"},"react-dom":{version:"^16.8.3 || ^17"}},identifier:"counter-hooks2"}},"docs-todo-list":{component:Object(l["a"])({loader:function(){var n=Object(i["a"])(c.a.mark((function n(){return c.a.wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(3).then(t.bind(null,"ewSp"));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:g},"Header/index.tsx":{import:"./Header",content:v},"store.ts":{import:"../store",content:w},"models.ts":{import:"./models",content:y},"Header/model.ts":{import:"./Header/model",content:k},"UndoList/model.ts":{import:"./UndoList/model",content:M},"UndoList/index.tsx":{import:"./UndoList",content:C},"index.less":{import:"./index.less",content:R}},dependencies:{react:{version:"^16.8.3 || ^17"},dobux:{version:"1.5.1"},"react-dom":{version:"^16.8.3 || ^17"}},identifier:"docs-todo-list"}},"counter-class":{component:Object(l["a"])({loader:function(){var n=Object(i["a"])(c.a.mark((function n(){return c.a.wrap((function(n){while(1)switch(n.prev=n.next){case 0:return n.next=2,t.e(3).then(t.bind(null,"8ZmH"));case 2:return n.abrupt("return",n.sent.default);case 3:case"end":return n.stop()}}),n)})));function e(){return n.apply(this,arguments)}return e}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:V},"model.ts":{import:"./model",content:L},"index.less":{import:"./index.less",content:N}},dependencies:{react:{version:"^16.8.3 || ^17"},dobux:{version:"1.5.1"},"react-dom":{version:"^16.8.3 || ^17"}},identifier:"counter-class"}}},P=t("x2v5"),z=t("KcUY"),I=t.n(z);e["default"]=n=>s.a.createElement(I.a,Object(o["a"])({},n,{config:a,demos:S,apis:P}))},q3YX:function(n){n.exports=JSON.parse('{"menus":{"zh-CN":{"*":[{"path":"/","title":"Dobux - React State Management Library","meta":{}}],"/api":[{"path":"/api","title":"API","meta":{"order":1}}],"/guide":[{"path":"/guide","title":"\u4ecb\u7ecd","meta":{"order":1}},{"path":"/guide/getting-started","title":"\u5feb\u901f\u4e0a\u624b","meta":{"order":2}},{"path":"/guide/examples","title":"\u793a\u4f8b","meta":{"order":3}},{"path":"/guide/best-practice","title":"\u6700\u4f73\u5b9e\u8df5","meta":{}},{"path":"/guide/devtools","title":"Devtools","meta":{}},{"path":"/guide/faq","title":"FAQ","meta":{}}]}},"locales":[{"name":"zh-CN","label":"\u4e2d\u6587"}],"navs":{"zh-CN":[{"title":"\u6307\u5357","path":"/guide"},{"title":"API","path":"/api"},{"title":"GitHub","path":"https://github.com/kcfe/dobux"},{"title":"\u66f4\u65b0\u65e5\u5fd7","path":"https://github.com/kcfe/dobux/releases"}]},"title":"Dobux","logo":"/dobux/logo.png","mode":"site","repository":{"url":"https://github.com/kcfe/dobux","branch":"master"},"theme":{},"exportStatic":{}}')},x2v5:function(n){n.exports=JSON.parse("{}")}}]);